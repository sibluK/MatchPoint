@using TournamentManager.Models
@using TournamentManager.Models.Enums
@using TournamentManager.Services
@rendermode InteractiveServer

@inject TournamentService TournamentService
@inject NavigationManager Navigation
@inject IStringLocalizer<Resource> Localizer


<div class="sidebar">
    <h3>@Localizer["Tournaments"]</h3>
    @foreach (var tournament in _tournaments)
    {
        <div class="tournament-wrapper" onclick="@(() => HandleTournamentClick(tournament.Name))">
            <p class="tournament-tournament-name">@tournament.Name</p>
            
            @if (tournament.Status == ActivityStatus.Live)
            {
                <div class="live-status-wrapper">
                    <div class="live-bubble"></div>
                    <p class="tournament-status">Live</p>
                </div>
            }
            else
            {
                <p class="tournament-date">
                    @tournament.StartDate.ToString("MMM d", CultureInfo.CurrentCulture)
                    - 
                    @tournament.EndDate.ToString("MMM d", CultureInfo.CurrentCulture)
                </p>
            }
            <p class="tournament-prize">$@tournament.Prize.ToString("N0", CultureInfo.CurrentCulture)</p>
        </div>
    }
</div>


@code {
    private List<Tournament> _tournaments;

    protected override async Task OnInitializedAsync()
    {
        _tournaments = (await TournamentService.GetAllTournamentsAsync())
            .OrderBy(t => Math.Abs((t.StartDate - DateTime.UtcNow).Ticks))
            .ToList();
        StateHasChanged();
    }

    private void HandleTournamentClick(string tournamentName)
    {
        Navigation.NavigateTo($"/tournaments/{tournamentName}");
    }
}