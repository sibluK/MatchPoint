@page "/tournaments/{tournamentName}"

@using TournamentManager.Models
@using TournamentManager.Models.Enums
@using TournamentManager.Services

@rendermode InteractiveServer

@inject TournamentService TournamentService
@inject VideoGameService VideoGameService
@inject TeamService TeamService;
@inject GameService GameService;
@inject BracketService BracketService;
@inject NavigationManager NavigationManager

<PageTitle>@_tournament.Name</PageTitle>

<div class="tournament-page-wrapper">

    <div class="tournament-information-wrapper">
        <h5 class="header">Information</h5>
        <AuthorizeView Roles="Admin">
            <div class="admin-button">
                <FluentButton OnClick="@HandleEditTournamentInfo">Edit</FluentButton>
            </div>
        </AuthorizeView>

        <div class="tournament-information">
            <div class="tournament-info-wrapper">
                <span class="wrapper-value">@_tournament.Name</span>
            </div>
            <div class="info-wrapper-container">
                <div class="info-wrapper">
                    <span class="wrapper-title">Date</span>
                    <span class="wrapper-value">
                        @_tournament.StartDate.ToString("MMM d", CultureInfo.CurrentCulture)
                        -
                        @_tournament.EndDate.ToString("MMM d, yyyy", CultureInfo.CurrentCulture)
                    </span>
                </div>
                <div class="info-wrapper">
                    <span class="wrapper-title">Teams</span>
                    <span class="wrapper-value">@_tournament.Teams.Count</span>
                </div>
                <div class="info-wrapper">
                    <span class="wrapper-title">Type</span>
                    <span class="wrapper-value">@_tournament.Type</span>
                </div>
                <div class="info-wrapper">
                    <span class="wrapper-title">Prize pool</span>
                    <span class="wrapper-value">$@_tournament.Prize.ToString("N0", CultureInfo.CurrentCulture)</span>
                </div>
            </div>
            </div>

    </div>
    
    <div class="brackets-wrapper">
        <h5 class="header">Bracket</h5>
            @if (_tournament.Bracket is not null)
            {
                <div class="bracket-wrapper">
                    <div class="bracket-information">
                        @GetBracketType(_tournament.Bracket.Type)
                    </div>
                    <div class="rounds-wrapper">
                        @for (var i = 1; i <= _tournament.Bracket.NumberOfRounds; i++)
                        {
                            <div class="round-wrapper">
                                @if (_tournament.Bracket.Matches.Any(m => m.BracketRound == i))
                                {
                                    foreach (var match in _tournament.Bracket.Matches.OrderBy(m => m.MatchNumber))
                                    {
                                        if (match.BracketRound == i)
                                        {
                                            <div class="match-wrapper" onclick="@(() => HandleMatchClick(match.Id))">
                                                <div class="match-information-wrapper">@match.BestOf</div>
                                                @if (match.Status == ActivityStatus.Upcoming)
                                                {
                                                    <div class="match-time">@TimeTillMatch(match.StartDate)</div>
                                                }
                                                else if (match.Status == ActivityStatus.Live)
                                                {
                                                    <div class="live-status-wrapper match-time">
                                                        <div class="live-bubble"></div>
                                                        <div>Live</div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="match-time">Ended</div>
                                                }
                                                @if (match.Team1 is not null)
                                                {
                                                    <div class="@GetTeamClass(match.WinnerTeamId, match.Team1.Id)">
                                                        <img src="@match.Team1.ImagePath"/>
                                                        <span>@match.Team1.Name</span>
                                                        <span class="score">@teamScores.GetValueOrDefault((match.Id, match.Team1.Id))</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="team-wrapper">TBD</div>
                                                }
                                                @if (match.Team2 is not null)
                                                {
                                                    <div class="@GetTeamClass(match.WinnerTeamId, match.Team2.Id)">
                                                        <img src="@match.Team2.ImagePath"/>
                                                        <span>@match.Team2.Name</span>
                                                        <span class="score">@teamScores.GetValueOrDefault((match.Id, match.Team2.Id))</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="team-wrapper">TBD</div>
                                                }
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
                <AuthorizeView Roles="Admin">
                    <div class="admin-button">
                        <FluentButton OnClick="@DeleteBracket">Delete Bracket</FluentButton>
                    </div>
                </AuthorizeView>
            }
            else
            { 
                <p>No bracket yet</p>
                <AuthorizeView Roles="Admin">
                    <div class="admin-button">
                        <FluentButton OnClick="@HandleGenerateBracket">Generate Bracket</FluentButton>
                    </div>
                </AuthorizeView>
            }
    </div>
    
    <div class="tournament-teams">
        <h5 class="header">Teams</h5>
        <AuthorizeView Roles="Admin">
            @if (_tournament.Bracket is null)
            {
                <div class="admin-button">
                    <FluentButton OnClick="@HandleAddTeams">Add teams</FluentButton>
                </div>
            }
        </AuthorizeView>

        @if (_tournament.Teams.Any())
        {
            <div class="tournament-teams-wrapper">
                @foreach (var team in _tournament.Teams)
                {
                    <div class="team-card-wrapper">
                        <AuthorizeView Roles="Admin">
                            @if (_tournament.Bracket is null)
                            {
                                <button onclick="@(() => RemoveTeam(team))" class="remove-team-button">Remove</button>
                            }
                        </AuthorizeView>
                        <span class="team-name" onclick="@(() => HandleTeamClick(team.Name))">@team.Name</span>
                        <img class="team-image" src="@team.ImagePath" alt="@team.Name"/>
                        <span class="@GetRankingClass(team.Ranking) team-ranking">#@team.Ranking</span>
                        <div class="team-card-players">
                            @foreach (var player in team.Players)
                            {
                                <span class="player-name" onclick="@(() => HandlePlayerClick(player.Nickname))">@player.Nickname</span>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <p>No teams assigned</p>
        }
    </div>
</div>

@if (_isEditDialogOpen)
{
    <FluentDialog>
        <FluentDialogBody>
            <div class="dialog-wrapper">
                <div class="object-name-id-wrapper">
                    <p class="dialog-object-name">@_tournament.Name</p>
                    <p class="dialog-object-id">ID: @_tournament.Id.ToString()</p>
                </div>
                <FluentTextField @bind-Value="@_tournament.Name">Name: </FluentTextField>
                <FluentDatePicker Label="Start date:" @bind-Value="@_startDate"></FluentDatePicker>
                <FluentDatePicker Label="End date:" @bind-Value="@_endDate"></FluentDatePicker>
                <FluentNumberField @bind-Value="@_tournament.Prize">Prize pool (US Dollars): </FluentNumberField>
                <label for="object-type">Type:</label>
                <select id="object-type" class="object-type" @bind="_tournament.Type">
                    @foreach (var type in Enum.GetValues(typeof(TournamentType)))
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <label for="object-game">Game:</label>
                <select id="object-game" class="object-game" @bind="_tournament.VideoGameId">
                    @foreach (var game in _games)
                    {
                        <option value="@game.Id">@game.Name</option>
                    }
                </select>
                <div class="dialog-button-wrapper">
                    <FluentButton @onclick="SaveChanges" Appearance="Appearance.Accent">Save</FluentButton>
                    <FluentButton @onclick="CloseDialog">Cancel</FluentButton>
                    <FluentButton @onclick="DeleteTournament" BackgroundColor="red" Color="white">Delete Tournament</FluentButton>
                </div>
            </div>
        </FluentDialogBody>
    </FluentDialog>
}

@if (_isGenerateBracketDialogOpen)
{
    <FluentDialog>
        
            <FluentDialogHeader>
                <div class="object-name-id-wrapper">
                    <h4 class="dialog-object-name">Generate Bracket</h4>
                    <h6 class="dialog-object-id">ID: @_frameBracket.Id</h6>
                </div>
            </FluentDialogHeader>
            
            <FluentDialogBody>
                <div class="dialog-wrapper">
                    <h5 class="dialog-section-name">Teams:</h5>

                    @foreach (var (team, index) in _tournament.Teams.Select((team, index) => (team, index + 1)))
                    {
                        <div class="dialog-team-wrapper">
                            <span>@index. </span>
                            <img src="@team.ImagePath" alt="Team photo"/>
                            <span>@team.Name</span>
                        </div>
                    }
                    @if (CalculateNumberOfRounds(_tournament.Teams.Count) % 1 != 0)
                    {
                        <h5 class="dialog-section-name">Number of rounds: <span>(Wrong number of teams)</span></h5>
                        <p>Allowed number of teams: 2, 4, 8, 16, 32</p>
                    }
                    else
                    {
                        <span class="dialog-section-name">Number of rounds: <span>@CalculateNumberOfRounds(_tournament.Teams.Count)</span></span>
                        <span class="dialog-hint-text">Depends on the number of teams chosen</span>

                        <label for="object-type">Amount of games per match:</label>
                        <select id="object-type" class="object-type" @bind="_bestOf">
                            @foreach (var bestof in Enum.GetValues(typeof(BestOf)))
                            {
                                <option value="@bestof">@bestof</option>
                            }
                        </select>

                        <label for="object-type">Amount of games in final match:</label>
                        <select id="object-type" class="object-type" @bind="_bestOfFinal">
                            @foreach (var bestof in Enum.GetValues(typeof(BestOf)))
                            {
                                <option value="@bestof">@bestof</option>
                            }
                        </select>

                        <label for="object-type">Type:</label>
                        <select id="object-type" class="object-type" @bind="_frameBracket.Type">
                            @foreach (var type in Enum.GetValues(typeof(BracketType)))
                            {
                                <option value="@type">@type</option>
                            }
                        </select>
                    }
                </div>
            </FluentDialogBody>
            
        <div class="dialog-button-wrapper">
            <FluentButton @onclick="GenerateBracket" Appearance="Appearance.Accent">Generate</FluentButton>
            <FluentButton @onclick="CloseDialog">Cancel</FluentButton>
        </div>
    </FluentDialog>
}

@if (_isAddTeamsDialogOpen)
{
    <FluentDialog>
        <FluentDialogHeader>
            <h4>Add teams</h4>
        </FluentDialogHeader>
        <FluentDialogBody>
            <FluentAutocomplete TOption="Team"
                                AutoComplete="on"
                                Autofocus="true"
                                Label="Teams"
                                Placeholder="Select teams"
                                OnOptionsSearch="@OnSearchAsync"
                                MaximumSelectedOptions="32"
                                OptionText="@(item => item.Name)"
                                @bind-SelectedOptions="@_selectedTeams" />
            <p class="number-of-teams-selected">Selected:  @_selectedTeams.Count()</p>

        </FluentDialogBody>
        
        <div class="dialog-button-wrapper">
            <FluentButton @onclick="SaveAddedTeams" Appearance="Appearance.Accent">Save</FluentButton>
            <FluentButton @onclick="CloseDialog">Cancel</FluentButton>
        </div>
    </FluentDialog>
}

@code {
    [Parameter] public string tournamentName { get; set; }
    private CancellationTokenSource _cts = new();
    private Tournament _tournament = new();
    private Dictionary<(Guid matchId, Guid teamId), int> teamScores = new();
    
    private bool _isEditDialogOpen;
    private bool _isGenerateBracketDialogOpen;
    private bool _isAddTeamsDialogOpen;
    
    private List<VideoGame> _games;

    private DateTime? _startDate;
    private DateTime? _endDate;

    private Bracket _frameBracket;
    private BestOf _bestOf;
    private BestOf _bestOfFinal;
    
    private IEnumerable<Team> _selectedTeams = Array.Empty<Team>();

    private async Task OnSearchAsync(OptionsSearchEventArgs<Team> e)
    {
        var allTeams = await TeamService.GetAllTeamsAsync(_cts.Token);
        var teamList = new List<Team>();
        
        foreach (var team in allTeams)
        {
            if (!_tournament.Teams.Contains(team))
            {
                teamList.Add(team);
            }
        }
        
        e.Items = teamList.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
            .OrderBy(i => i.Name);
    }
    
    protected override async Task OnInitializedAsync()
    {
        _tournament = await TournamentService.GetTournamentByNameAsync(tournamentName);

        if (_tournament is not null)
        {
            _startDate = _tournament.StartDate;
            _endDate = _tournament.EndDate;
        }
        
        if (_tournament.Bracket is not null && _tournament.Bracket.Matches.Any())
        {
            foreach (var match in _tournament.Bracket.Matches)
            {
                if (match.Team1 is not null && match.Team2 is not null)
                {
                    teamScores[(match.Id, match.Team1.Id)] = await GetTeamMatchScore(match.Id, match.Team1.Id);
                    teamScores[(match.Id, match.Team2.Id)] = await GetTeamMatchScore(match.Id, match.Team2.Id);
                }
            }
        }
    }
    
    private async Task HandleEditTournamentInfo()
    {
        if (_games is null)
        {
            _games = await VideoGameService.GetAllVideoGamesAsync();
        }

        _isEditDialogOpen = true;
    }

    private async Task HandleGenerateBracket()
    {
        _frameBracket = new();
        _isGenerateBracketDialogOpen = true;
    }

    private async Task HandleAddTeams()
    {
        _isAddTeamsDialogOpen = true;
    }
    
    private void CloseDialog()
    {
        _isEditDialogOpen = false;
        _isGenerateBracketDialogOpen = false;
        _isAddTeamsDialogOpen = false;
    }

    private async Task SaveChanges()
    {
        if (_tournament is not null)
        {
            var updatedTournament = await TournamentService.UpdateTournamentInfoAsync(_tournament, _cts.Token);

            _startDate = updatedTournament.StartDate;
            _endDate = updatedTournament.EndDate;
            
            _isEditDialogOpen = false;
            _isGenerateBracketDialogOpen = false;
            
            NavigationManager.NavigateTo($"/tournaments/{updatedTournament.Name}");
        }
    }

    private async Task GenerateBracket()
    {
        var numberOfRounds = CalculateNumberOfRounds(_tournament.Teams.Count);

        _frameBracket.NumberOfRounds = (int)numberOfRounds;
        
        if (numberOfRounds % 1 == 0)
        {
            await BracketService.GenerateBracket(_frameBracket, _tournament.Id, _tournament.Teams.ToList(), _bestOf, _bestOfFinal, _cts.Token);
        }

        _isGenerateBracketDialogOpen = false;
        _frameBracket = null;
    }

    private async Task DeleteBracket()
    {
        Console.WriteLine($"Deleting bracket: {_tournament.Bracket.Id}");
        await BracketService.DeleteBracket(_tournament.Bracket, _cts.Token);
    }

    private async Task DeleteTournament()
    {
        Console.WriteLine($"Deleting tournament: {_tournament.Id}");
        await TournamentService.DeleteTournamentAsync(_tournament.Id, _cts.Token);
        NavigationManager.NavigateTo("/tournaments");
    }

    private async Task SaveAddedTeams()
    {
        if (_selectedTeams.Any())
        {
           await TournamentService.AddTeamsToTournamentAsync(_tournament.Id, _selectedTeams.ToList(), _cts.Token);
           StateHasChanged();
        }
        
        _isAddTeamsDialogOpen = false;
        _selectedTeams = Array.Empty<Team>();
    }

    private async Task RemoveTeam(Team team)
    {
        await TournamentService.RemoveTeamFromTournament(_tournament.Id, team.Id, _cts.Token);
        StateHasChanged();
    }
    
    private async Task<int> GetTeamMatchScore(Guid matchId, Guid teamId)
    {
        List<Game> matchGames = await GameService.GetMatchGames(matchId);
        return matchGames.Count(g => g.WinnerTeamId == teamId);
    }
    
    private string GetRankingClass(int ranking)
    {
        return ranking switch
        {
            <= 3 => "gold",
            <= 10 => "silver",
            <= 20 => "bronze",
            _ => "white"
        };
    }

    private string GetBracketType(BracketType type)
    {
        return type switch
        {
            BracketType.SE => "Single Elimination",
            BracketType.DE => "Double Elimination",
            _ => "No type"
        };
    }

    private string TimeTillMatch(DateTime startDate)
    {
        return startDate.ToString("g");
    }

    private string GetTeamClass(Guid? winnerTeamId, Guid teamId)
    {
        if (winnerTeamId.HasValue)
        {
            return winnerTeamId == teamId ? "team-wrapper winner-team" : "team-wrapper loser-team";
        }
        return winnerTeamId == teamId ? "team-wrapper winner-team" : "team-wrapper";
    }

    private double CalculateNumberOfRounds(int numberOfTeams)
    {
        return Math.Log(numberOfTeams, 2);
    }

    private void HandleTeamClick(string name)
    {
        NavigationManager.NavigateTo($"teams/{name}");
    }

    private void HandlePlayerClick(string nickname)
    {
        NavigationManager.NavigateTo($"players/{nickname}");
    }

    private void HandleMatchClick(Guid matchId)
    {
        NavigationManager.NavigateTo($"/matches/{matchId}");
    }
    
}