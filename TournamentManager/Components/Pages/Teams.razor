@page "/teams"
@using TournamentManager.Models
@using TournamentManager.Services
@rendermode InteractiveServer

@inject Data.ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject TeamService TeamService

<div>
    <FluentDataGrid Items="@FilteredItems"
                    GridTemplateColumns="0.2fr 0.2fr 0.2fr 0.2fr 0.2fr"
                    Pagination="@pagination"
                    TGridItem="Team"
                    OnCellClick="HandleCellClick">

        <!-- Team Image -->
        <TemplateColumn Style="height: 50px; cursor: pointer" Title="Avatar" Tooltip="true" Align="Align.Center">
            <img class="team-image" src="@context.ImagePath" alt="Avatar of @(context.Name)" style="width: 40px; height: 40px; border-radius: 5px;" />
        </TemplateColumn>

        <!-- Name -->
        <PropertyColumn Style="height: 50px; cursor: pointer" Property="@(c => c.Name)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Align="Align.Center" Tooltip="true" Title="Name">
            <ColumnOptions>
                <div class="search-box">
                    <FluentSearch Autofocus="true" @bind-Value="nameFilter" @oninput="HandlePlayerFilter" @bind-Value:after="HandleClear" Placeholder="Search name..." Style="width: 100%;" Label="Filter" />
                </div>
            </ColumnOptions>
        </PropertyColumn>

        <!-- Ranking -->
        <PropertyColumn Style="height: 50px; cursor: pointer" Property="@(c => c.Ranking)" Sortable="true" Align="Align.Center" Tooltip="true" Title="Ranking" />
        
        <!-- Points -->
        <PropertyColumn class="hover-background" Style="height: 50px; cursor: pointer" Property="@(c => c.Points)" Sortable="true" Align="Align.Center" Tooltip="true" Title="Points"/>
        
        <!-- Region -->
        <PropertyColumn Style="height: 50px; cursor: pointer" Property="@(c => c.Region)" Sortable="true" Align="Align.Center" Tooltip="true" Title="Region" />

    </FluentDataGrid>
</div>

<FluentPaginator State="@pagination" />

@code {
    bool _clearItems = false;
    IQueryable<Team>? items;
    PaginationState pagination = new PaginationState { ItemsPerPage = 20 };
    string nameFilter = string.Empty;

    IQueryable<Team>? FilteredItems
    {
        get
        {
            var result = items;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result?.Where(c => c.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        items = (await TeamService.GetAllTeamsAsync()).AsQueryable();
    }

    private void HandlePlayerFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void HandleCellClick(FluentDataGridCell<Team> cell)
    {
        if (cell.Item is Team team)
        {
            Navigation.NavigateTo($"/teams/{team.Name}", forceLoad: true);
        }
    }
}