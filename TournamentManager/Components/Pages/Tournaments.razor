@page "/tournaments"
@using TournamentManager.Models
@using TournamentManager.Services

@rendermode InteractiveServer

@inject TournamentService TournamentService
@inject NavigationManager Navigation

<div class="tournaments-page-wrapper">
    <h3>Featured</h3>
    <div class="featured-tournament" onclick="@(() => HandleTournamentClick(_featuredTournament.Id))">
        <div class="tournament-teams-column left-column">
            @foreach (var team in firstColumnTeams)
            {
                <img class="team-image" src="@team.ImagePath"/>
            }
        </div>

        <div class="tournament-information">
            <h3 class="tournament-name">@_featuredTournament.Name</h3>
            <span class="tournament-date">@_featuredTournament.StartDate.ToString("D")</span>
            <span class="tournament-prize">$@_featuredTournament.Prize</span>
        </div>

        <div class="tournament-teams-column right-column">
            @foreach (var team in secondColumnTeams)
            {
                <img class="team-image" src="@team.ImagePath"/>
            }
        </div>

    </div>

    <h3>Upcoming tournaments</h3>
    <div class="up-tournaments">
        <div class="up-tournament-list">
            @foreach (var tournament in _tournaments)
            {
                <div class="up-tournament" onclick="@(() => HandleTournamentClick(tournament.Id))">
                    <div class="up-tournament-name-date">
                        <h4 class="up-tournament-name">@tournament.Name</h4>
                        <p class="up-tournament-date">@tournament.StartDate.ToString("MMM d", CultureInfo.CurrentCulture) - @tournament.EndDate.ToString("MMM d", CultureInfo.CurrentCulture)</p>
                    </div>
                    <div class="up-tournament-type-prize">
                        <span class="up-tournament-type">@tournament.Type.ToString().ToUpper()</span>
                        <span class="up-tournament-prize">$@tournament.Prize</span>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Tournament> _tournaments = new();
    private Tournament? _featuredTournament;
    private List<Team> firstColumnTeams = new();
    private List<Team> secondColumnTeams = new();

    protected override async Task OnInitializedAsync()
    {
        _featuredTournament = await TournamentService.GetFeaturedTournamentAsync();
        _tournaments = await TournamentService.GetAllTournamentsAsync();

        if (_featuredTournament?.Teams != null && _featuredTournament.Teams.Any())
        {
            int halfCount = (_featuredTournament.Teams.Count + 1) / 2;

            firstColumnTeams = _featuredTournament.Teams.Take(halfCount).ToList();
            secondColumnTeams = _featuredTournament.Teams.Skip(halfCount).ToList();
        }
    }

    private void HandleTournamentClick(Guid tournamentId)
    {
        Navigation.NavigateTo($"/tournaments/{tournamentId}");
    }
}