@page "/players"

@using Microsoft.FluentUI.AspNetCore.Components.Icons.Regular
@using TournamentManager.Models
@using TournamentManager.Models.Enums
@using TournamentManager.Services

@rendermode InteractiveServer

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject PlayerService PlayerService
@inject TeamService TeamService
@inject IStringLocalizer<Resource> Localizer

<PageTitle>Players</PageTitle>

@if (IsAdmin)
{
    <div class="page-action-wrapper">
        <h4>Actions:</h4>
        <div class="page-action-buttons">
            <button onclick="@HandlePlayerCreation" class="add-button">Add</button>
        </div>
    </div>
}

<FluentDataGrid Items="@FilteredItems"

                Pagination="@pagination"
                TGridItem="Player"
                OnCellClick="HandleCellClick">

    <!-- Player Image -->
    <TemplateColumn Style="height: 50px; cursor: pointer" Title="@Localizer["Avatar"]" Tooltip="true" Align="Align.Center">
        <img class="player-avatar" src="@context.ImagePath" alt="Avatar of @(context.Nickname)" style="width: 40px; height: 40px; border-radius: 5px;" />
    </TemplateColumn>

    <!-- Nickname with OnClick -->
    <PropertyColumn Align="Align.Center" Style="height: 50px; cursor: pointer" Property="@(c => c.Nickname)" Sortable="true" Filtered="!string.IsNullOrWhiteSpace(nameFilter)" Tooltip="true" Title="@Localizer["Nickname"]">
        <ColumnOptions>
            <div class="search-box">
                <FluentSearch Autofocus="true" @bind-Value="nameFilter" @oninput="HandlePlayerFilter" @bind-Value:after="HandleClear" Placeholder="@Localizer["Nickname_Search"]" Style="width: 100%;" Label="Filter" />
            </div>
        </ColumnOptions>
    </PropertyColumn>
        
    <!-- Rating -->
    <PropertyColumn Style="height: 50px; cursor: pointer" Property="@(c => c.Rating)" Sortable="true" Align="Align.Center" Tooltip="true" Title="@Localizer["Rating"]"/>
        
    <!-- Nationality -->
    <PropertyColumn class="hover-background" Style="height: 50px; cursor: pointer" Property="@(c => c.Nationality)" Sortable="true" Align="Align.Center" Tooltip="true" Title="@Localizer["Nationality"]"/>

    <!-- Birthday -->
    <PropertyColumn Style="height: 50px; cursor: pointer"  Property="@(c => GetFormattedDate(c.Birthday))"  Sortable="true" Align="Align.Center" Tooltip="true" Title="@Localizer["Birthday"]" />

    <!-- Status -->
    <PropertyColumn Style="height: 50px; cursor: pointer" Property="@(c => c.Status)" Sortable="true" Align="Align.Center" Tooltip="true" Title="@Localizer["Player_Status"]" />

    @if (IsAdmin)
    {
        <TemplateColumn Style="height: 50px; cursor: pointer" Title="Actions" Tooltip="true" Align="Align.Center">
            <ChildContent Context="itemContext">
                <FluentButton StopPropagation="true" OnClick="@(() => HandleEditPlayer(itemContext))">
                    Edit
                </FluentButton>
            </ChildContent>
        </TemplateColumn>
    }
</FluentDataGrid>

<FluentPaginator State="@pagination" />

@if (_isEditDialogOpen)
{
    <FluentDialog @bind-Open="_isEditDialogOpen">
        <FluentDialogBody>
            @if (_selectedPlayer is not null)
            {
                <div class="dialog-wrapper">
                    <div class="object-name-id-wrapper">
                        <p class="dialog-object-name">@_selectedPlayer.Nickname</p>
                        <p class="dialog-object-id">ID: @_selectedPlayer.Id.ToString()</p>
                    </div>

                    <div class="image-wrapper">
                        <img class="dialog-object-image" src="@_selectedPlayer.ImagePath" alt="Player Image"/>
                    </div>

                    <FluentTextField @bind-Value="@_selectedPlayer.Nickname">Nickname: </FluentTextField>
                    <label for="activity-status">Status:</label>
                    <select id="activity-status" class="activity-status" @bind="_selectedPlayer.Status">
                        @foreach (var status in Enum.GetValues(typeof(PlayerStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                    <FluentTextField @bind-Value="@_selectedPlayer.Name">Name: </FluentTextField>
                    <FluentTextField @bind-Value="@_selectedPlayer.Nationality">Nationality: </FluentTextField>
                    <FluentDatePicker Label="Birthday:" @bind-Value="@_selectedPlayer.Birthday"></FluentDatePicker>
                    <FluentNumberField @bind-Value="@_selectedPlayer.Rating">Rating: </FluentNumberField>
                    <label for="object-team">Team:</label>
                    <select id="object-team" class="object-team" @bind="_selectedPlayer.TeamId">
                        @foreach (var team in _teams)
                        {
                            <option value="@team.Id">@team.Name</option>
                        }
                    </select>
                    <FluentTextField @bind-Value="@_selectedPlayer.ImagePath" Label="Image Path" ReadOnly="true"/>
                    <FluentInputFile
                        AnchorId="MyUploadStream"
                        DragDropZoneVisible="true"
                        Mode="InputFileMode.Stream"
                        Multiple="false"
                        MaximumFileSize="@(20 * 1024 * 1024)"
                        Accept="image/*"
                        OnFileUploaded="@OnFileUploadedUpdateAsync"/>

                    <FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
                        Upload files
                    </FluentButton>
                    <div class="dialog-button-wrapper">
                        <FluentButton @onclick="SaveChanges" Appearance="Appearance.Accent">Save</FluentButton>
                        <FluentButton @onclick="CloseDialog">Cancel</FluentButton>
                    </div>
                </div>
            }
        </FluentDialogBody>
    </FluentDialog>
}

@if (_isAddDialogOpen)
{
    <FluentDialog>
        <FluentDialogBody>
            <div class="dialog-wrapper">
                <div class="object-name-id-wrapper">
                    <p class="dialog-object-name">@_framePlayer.Nickname</p>
                    <p class="dialog-object-id">ID: @_framePlayer.Id.ToString()</p>
                </div>

                <div class="image-wrapper">
                    <img class="dialog-object-image" src="@_framePlayer.ImagePath" alt="Player Image"/>
                </div>

                <FluentTextField @bind-Value="@_framePlayer.Nickname">Nickname: </FluentTextField>
                <label for="activity-status">Status:</label>
                <select id="activity-status" class="activity-status" @bind="_framePlayer.Status">
                    @foreach (var status in Enum.GetValues(typeof(PlayerStatus)))
                    {
                        <option value="@status">@status</option>
                    }
                </select>
                <FluentTextField @bind-Value="@_framePlayer.Name">Name: </FluentTextField>
                <FluentTextField @bind-Value="@_framePlayer.Nationality">Nationality: </FluentTextField>
                <FluentDatePicker Label="Birthday:" @bind-Value="@_framePlayer.Birthday"></FluentDatePicker>
                <FluentNumberField @bind-Value="@_framePlayer.Rating">Rating: </FluentNumberField>
                <label for="object-team">Team:</label>
                <select id="object-team" class="object-team" @bind="_framePlayer.TeamId">
                    @foreach (var team in _teams)
                    {
                        <option value="@team.Id">@team.Name</option>
                    }
                </select>
                <FluentTextField @bind-Value="@_framePlayer.ImagePath" Label="Image Path" ReadOnly="true"/>
                <FluentInputFile
                    AnchorId="MyUploadStream"
                    DragDropZoneVisible="true"
                    Mode="InputFileMode.Stream"
                    Multiple="false"
                    MaximumFileSize="@(20 * 1024 * 1024)"
                    Accept="image/*"
                    OnFileUploaded="@OnFileUploadedCreateAsync"/>

                <FluentButton Appearance="Appearance.Accent" Id="MyUploadStream">
                    Upload files
                </FluentButton>
            </div>
            
        </FluentDialogBody>
        <FluentDialogFooter>
            <div class="dialog-button-wrapper">
                <FluentButton @onclick="SaveChanges" Appearance="Appearance.Accent">Save</FluentButton>
                <FluentButton @onclick="CloseDialog">Cancel</FluentButton>
            </div>
        </FluentDialogFooter>
    </FluentDialog>
}

@code {
    
    //Table fields
    bool _clearItems = false;
    IQueryable<Player>? items;
    PaginationState pagination = new() { ItemsPerPage = 20 };
    string nameFilter = string.Empty;
    IQueryable<Player>? FilteredItems
    {
        get
        {
            var result = items;

            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result?.Where(c => c.Nickname.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
            }

            return result;
        }
    }
    
    private bool IsAdmin { get; set; }
    
    //Fields for the dialog window
    private bool _isEditDialogOpen;
    private bool _isAddDialogOpen;
    private Player? _selectedPlayer;
    private Player? _framePlayer;
    
    //Fields for the team select dropdown
    private List<Team> _teams;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        IsAdmin = user.IsInRole("Admin");

        var cts = new CancellationTokenSource();
        
        items = (await PlayerService.GetAllPlayersAsync(cts.Token)).AsQueryable();

        _isEditDialogOpen = false;
        _isAddDialogOpen = false;
        _selectedPlayer = null;
        _framePlayer = null;
    }
    
    private async Task HandleEditPlayer(Player player)
    {
        var cts = new CancellationTokenSource();
        
        if (_teams is null)
        {
            _teams = await TeamService.GetAllTeamsAsync(cts.Token);
        }

        _selectedPlayer = new Player
        {
            Id = player.Id,
            Nickname = player.Nickname,
            Status = player.Status,
            Name = player.Name,
            Nationality = player.Nationality,
            Birthday = player.Birthday,
            Rating = player.Rating,
            ImagePath = player.ImagePath,
            TeamId = player.TeamId,
        };

        _isEditDialogOpen = true;
    }
    
    private async Task HandlePlayerCreation()
    {
        var cts = new CancellationTokenSource();
        
        if (_teams is null)
        {
            _teams = await TeamService.GetAllTeamsAsync(cts.Token);
        }
        
        _framePlayer = new Player();
        _isAddDialogOpen = true;
    }

    private void CloseDialog()
    {
        _isEditDialogOpen = false;
        _isAddDialogOpen = false;
        _selectedPlayer = null;
        _framePlayer = null;
    }

    private async Task SaveChanges()
    {
        var cts = new CancellationTokenSource();
        
        if (_selectedPlayer is not null)
        {
            await PlayerService.UpdatePlayerAsync(_selectedPlayer);
            
            _isEditDialogOpen = false;
        }

        if (_framePlayer is not null)
        {
            await PlayerService.CreatePlayerAsync(_framePlayer, cts.Token);

            _isAddDialogOpen = false;
        }
    }
    
    private async Task OnFileUploadedUpdateAsync(FluentInputFileEventArgs file)
    {
        if (_selectedPlayer is not null)
        {
            _selectedPlayer.ImagePath = await SaveImageAsync(file);
        }
    }
    
    private async Task OnFileUploadedCreateAsync(FluentInputFileEventArgs file)
    {
        if (_framePlayer is not null)
        {
            _framePlayer.ImagePath = await SaveImageAsync(file);
        }
    }

    private async Task<string> SaveImageAsync(FluentInputFileEventArgs file)
    {
        var fileName = Path.GetFileName(file.Name);
        var filePath = Path.Combine("wwwroot", "Images", "Player", fileName);

        if (File.Exists(filePath))
        {
            Console.WriteLine("File with same name is already in the folder.");
            return "";
        }
        
        using (var stream = new FileStream(filePath, FileMode.Create))
        {
            await file.Stream!.CopyToAsync(stream);
            await file.Stream.DisposeAsync();
        }
        
        return $"Images/Player/{fileName}";
    }
    
    private void HandlePlayerFilter(ChangeEventArgs args)
    {
        if (args.Value is string value)
        {
            nameFilter = value;
        }
    }

    private void HandleClear()
    {
        if (string.IsNullOrWhiteSpace(nameFilter))
        {
            nameFilter = string.Empty;
        }
    }

    private void HandleCellClick(FluentDataGridCell<Player> cell)
    {
        if (cell.Item is Player player)
        {
            Navigation.NavigateTo($"/players/{player.Nickname}", forceLoad: true);
        }
    }
    
    private string GetFormattedDate(DateTime? date)
    {
        return date?.ToString("d", CultureInfo.CurrentCulture) ?? "N/A"; 
    }
}
