@page "/players/{nickname}"

@using TournamentManager.DTOs
@using TournamentManager.Models
@using TournamentManager.Services
@using TournamentManager.Utility
@rendermode InteractiveServer

@inject PlayerService PlayerService
@inject NavigationManager Navigation

<PageTitle>Profile - @player.Nickname</PageTitle>

    <div class="player-information">
        <div class="player-image-wrapper">
            <img class="player-image" src="@player.ImagePath" alt="Photo of @player.Nickname"/>
        </div>
        <div class="player-information-wrapper">
            <p class="player-nickname">@player.Nickname</p>
            <p class="player-name">@player.Name</p>
            <p class="player-nationality-age">@player.Nationality, @(_helpers.CalculateAge(player.Birthday))</p>
            
            @if (player.Team is not null)
            {
                <div class="player-team-wrapper" onclick="@(() => HandleTeamClick(player.Team.Name))">
                    <img class="player-team-image" src="@player.Team.ImagePath" alt="@player.Name" />
                    <p class="player-team-name">@player.Team.Name</p>
                </div>
            }
            else
            {
                <div class="player-team-wrapper">
                    <p class="player-team-name">No team</p>
                </div>
            }
            
            <div class="player-status-wrapper">
                <p class="player-status">@player.Status</p>
            </div>
        </div>

        <div class="@GetRatingClass(player.Rating) player-rating">
            <p>#@player.Rating</p>
        </div>
    </div>

    <FluentTabs ActiveTabId="tab-1" Width="100%">
        <FluentTab>
            <Header>Team</Header>
            <Content>
                @if (player.Team is not null)
                {
                    <p>@player.Team.Name</p>
                    <img src="@player.Team.ImagePath" alt="@player.Team.Name"/>
                }
                else
                {
                    <p class="player-team-name">No team</p>
                }
            </Content>
        </FluentTab>
        <FluentTab>
            <Header>Statistics</Header>
            <Content>
                <div class="player-stats-wrapper">
                    <div class="statistic">Maps Played<span class="stat-value">@stats.MapsPlayed</span></div>
                    <div class="statistic">Kills<span class="stat-value">@stats.Kills</span></div>
                    <div class="statistic">KDR<span class="stat-value @GetKDRClass(stats.KDR)">@stats.KDR</span></div>
                    <div class="statistic">Deaths<span class="stat-value">@stats.Deaths</span></div>
                    <div class="statistic">Kill - Death difference<span class="stat-value">@stats.KillDeathDiff</span></div>
                    <div class="statistic">Assists<span class="stat-value">@stats.Assists</span></div>
                </div>
            </Content>
        </FluentTab>
        <FluentTab>
            <Header>Tournaments</Header>
            <Content>
                IEM Cologne
            </Content>
        </FluentTab>
        <FluentTab>
            <Header>Matches</Header>
            <Content>
                Match card
            </Content>
        </FluentTab>
        
    </FluentTabs>

@code {
    
    [Parameter] public string Nickname { get; set; }

    private Player? player;

    private PlayerStatistics? stats;

    private Helpers _helpers = new ();
    
    
    protected override async Task OnInitializedAsync()
    {
        var cts = new CancellationTokenSource();
        player = await PlayerService.GetPlayerAndTeamByNicknameAsync(Nickname, cts.Token);
        stats = await PlayerService.GetPlayerStatsByNicknameAsync(Nickname, cts.Token);
        
        if (player == null || stats == null)
        {
            Navigation.NavigateTo("/players");
        }
    }

    private void HandleTeamClick(string teamName)
    {
        Navigation.NavigateTo($"/teams/{teamName}", forceLoad: true);
    }
    
    private string GetRatingClass(int rating)
    {
        return rating switch
        {
            <= 3 => "gold",
            <= 10 => "silver",
            <= 20 => "bronze",
            _ => "white"
        };
    }
    
    private string GetKDRClass(double KDR)
    {
        return KDR switch
        {
            <= 0.99 => "underOne",
            >= 1 => "overOne",
            _ => "" 
        };
    }
    
}